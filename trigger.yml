name: Trigger Jenkins on Mention

on:
  issue_comment:
    types: [created]

permissions:
  issues: write

jobs:
  check-and-trigger:
    runs-on: ubuntu-latest
    if: |
      github.event.comment.body != '' &&
      contains(toJson(github.event.comment.body), '@Dotnet-s390x') &&
      github.event.comment.user.login != 'Dotnet-s390x'

    env:
      JENKINS_URL: http://148.100.85.217:8080
      JENKINS_USER: admin
      JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
      TARGET_JOB: dotnet-builds
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Extract PR number from comment
        id: extract
        run: |
          echo "pr_number=$(jq --raw-output .issue.number "$GITHUB_EVENT_PATH")" >> "$GITHUB_OUTPUT"

      - name: Check the reason
        id: intent
        run: |
          body="${{ github.event.comment.body }}"
          if echo "$body" | grep -qi "@Dotnet-s390x cancel"; then
            echo intent="cancel" >> "$GITHUB_OUTPUT"
          elif echo "$body" | grep -qi "@Dotnet-s390x build"; then
            echo intent="build" >> "$GITHUB_OUTPUT"
          else 
            echo intent="help" >> "$GITHUB_OUTPUT"
          fi

      - name: Help 
        if: steps.intent.outputs.intent == 'help'
        id: Help  
        env:
          PR_NUMBER: ${{ steps.extract.outputs.pr_number }}
        run: |
            COMMENT=$'### Dotnet-s390x Bot Instructions\n\nTo **start** a .NET runtime build on s390x, comment:\n\n```\n@Dotnet-s390x build\n```\n\nTo **cancel** a running build:\n\n```\n@Dotnet-s390x cancel\n```'
            gh api "repos/${{ github.repository }}/issues/${{ steps.extract.outputs.pr_number }}/comments" \
              --method POST \
              --field body="$COMMENT"

      - name: Cancel running/queued Jenkins build
        if: steps.intent.outputs.intent == 'cancel'
        id: Cancel
        env:
          PR_NUMBER: ${{ steps.extract.outputs.pr_number }}
        run: |
          auth="-u $JENKINS_USER:$JENKINS_TOKEN"
          BUILD_INFO=$(curl -s $auth "$JENKINS_URL/job/$TARGET_JOB/lastBuild/api/json")
          is_running=$(echo "$BUILD_INFO" | jq -r '.building')
          build_number=$(echo "$BUILD_INFO" | jq -r '.number')
          if [ "$is_running" = "true" ]; then
            running_pr=$(echo "$BUILD_INFO" | jq -r '.actions[]?.parameters[]? | select(.name == "pr_number") | .value')
            if [ "$running_pr" = "$PR_NUMBER" ]; then
              echo "Stopping running build #$build_number"
              curl -X POST $auth "$JENKINS_URL/job/$TARGET_JOB/$build_number/stop"
            fi
          fi
          queue_info=$(curl -s $auth "$JENKINS_URL/queue/api/json")
          echo "$queue_info" | jq -c '.items[]' | while read -r item; do
            pr=$(echo "$item" | jq -r '.actions[]?.parameters[]? | select(.name == "pr_number") | .value')
            item_id=$(echo "$item" | jq -r '.id')
            if [ "$pr" = "$PR_NUMBER" ]; then
              echo "Cancelling queued item ID $item_id"
              curl -X POST $auth "$JENKINS_URL/queue/cancelItem?id=$item_id"
            fi
          done
          COMMENT=$'Build CANCELLED!'
          gh api "repos/${{ github.repository }}/issues/${{ steps.extract.outputs.pr_number }}/comments" \
              --method POST \
              --field body="$COMMENT"


      - name: Check Jenkins for duplicate PR build
        if: steps.intent.outputs.intent == 'build'
        id: jenkins_check
        env:
          PR_NUMBER: ${{ steps.extract.outputs.pr_number }}
        run: |
          auth="-u $JENKINS_USER:$JENKINS_TOKEN"
          BUILD_INFO=$(curl -s $auth "$JENKINS_URL/job/$TARGET_JOB/lastBuild/api/json")
          
          is_running=$(echo "$BUILD_INFO" | jq -r '.building')
          if [ "$is_running" = "true" ]; then
            running_pr=$(echo "$BUILD_INFO" | jq -r '
              try (
                .actions[]? 
                | select(.parameters != null) 
                | .parameters[]? 
                | select(.name == "pr_number") 
                | .value
              ) catch ""')
          else
            running_pr=""
          fi
          
          queued_prs=$(curl -s $auth "$JENKINS_URL/queue/api/json" | jq -r '
            [
              .items[]? 
              | try (
                  .actions[]? 
                  | select(.parameters != null) 
                  | .parameters[]? 
                  | select(.name == "pr_number") 
                  | .value
                ) catch empty
            ] | .[]
          ')
          
          echo "running_pr=$running_pr"
          echo "queued_prs=$queued_prs"
          
          if [[ "$running_pr" == "$PR_NUMBER" ]] || echo "$queued_prs" | grep -q "^$PR_NUMBER$"; then
            echo "duplicate=true" >> "$GITHUB_OUTPUT"
          else
            echo "duplicate=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Comment that build is already in progress
        if: steps.intent.outputs.intent == 'build' && steps.jenkins_check.outputs.duplicate == 'true'
        env:
          PR_NUMBER: ${{ steps.extract.outputs.pr_number }}
        run: |
          COMMENT=$' A build is already in progress! \n\nTo cancel the current build, please comment:\n\n```\n@Dotnet-s390x cancel\n```\n\nOnce cancelled, you can trigger a new build using:\n\n```\n@Dotnet-s390x build\n```'
          gh api "repos/${{ github.repository }}/issues/${{ steps.extract.outputs.pr_number }}/comments" \
              --method POST \
              --field body="$COMMENT"

      - name: Get PR head and base branches
        if: steps.intent.outputs.intent == 'build' && steps.jenkins_check.outputs.duplicate == 'false'
        id: pr_info
        env:
          PR_NUMBER: ${{ steps.extract.outputs.pr_number }}
        run: |
          pr_data=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
          head_repo_clone_url=$(echo "$pr_data" | jq -r .head.repo.clone_url)
          echo "head_repo_clone_url=$head_repo_clone_url" >> "$GITHUB_OUTPUT"
          head_branch=$(echo "$pr_data" | jq -r .head.ref)
          base_branch=$(echo "$pr_data" | jq -r .base.ref)
          echo "head_branch=$head_branch" >> "$GITHUB_OUTPUT"
          echo "base_branch=$base_branch" >> "$GITHUB_OUTPUT"


      - name: Trigger Jenkins build
        if: steps.intent.outputs.intent == 'build' && steps.jenkins_check.outputs.duplicate == 'false'
        run: |
          curl -X POST "$JENKINS_URL/job/$TARGET_JOB/buildWithParameters" \
            --user "$JENKINS_USER:$JENKINS_TOKEN" \
            --data-urlencode "pr_number=${{ steps.extract.outputs.pr_number }}" \
            --data-urlencode "comment_user=${{ github.actor }}" \
            --data-urlencode "comment_body=${{ github.event.comment.body }}" \
            --data-urlencode "head_branch=${{ steps.pr_info.outputs.head_branch }}" \
            --data-urlencode "base_branch=${{ steps.pr_info.outputs.base_branch }}" \
            --data-urlencode "head_repo_clone_url=${{ steps.pr_info.outputs.head_repo_clone_url }}"
          COMMENT=$' Build Queued.. \n\n To cancel the current build, please comment:\n\n```\n@Dotnet-s390x cancel\n```'
          gh api "repos/${{ github.repository }}/issues/${{ steps.extract.outputs.pr_number }}/comments" \
              --method POST \
              --field body="$COMMENT"
